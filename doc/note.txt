epoll的几种模式
listenfd[监听的fd] connfd[客户端连接的fd]

先说说listenfd
1 水平触发的非阻塞： 正常，客户端并发连接的情况下能正常处理
2 边缘触发的非阻塞： 不太正常，高并发时，会出现客户端连接不上的问题

再说说connfd[假设服务端缓冲区有5 Byte,客户端发送了10 Byte]
1 水平触发的阻塞 水平触发触发了2次，因为客户设置的缓冲区是5字节，处理代码一次接收不完，水平触发一直触发，直到数据全部读取完毕
2 水平触发的非阻塞 同上
3 边缘触发的阻塞 边缘触发只触发了一次，只读取了5个字节
    继续在客户端发送一个字符，服务器又触发了一次新的边缘触发
    阻塞的边缘触发，如果不一次性读取一个事件上的数据，会干扰下一个事件
4 边缘触发的阻塞[带循环的ET模式，循环读完缓冲区里面的数据]
5 边缘触发的非阻塞[不带循环的ET] 数据不会全部读完
6 边缘触发的非阻塞[带循环的ET] 数据全部读完，EAGAIN和EWOULDBLOCK来判断数据全部读取完毕了，可以退出循环了

总结
1.对于监听的listenfd，最好使用水平触发模式，边缘触发模式会导致高并发情况下，有的客户端会连接不上。如果非要使用边缘触发，可以用while来循环accept()。
2.对于读写的connfd，水平触发模式下，阻塞和非阻塞效果都一样，不过为了防止特殊情况，还是建议设置非阻塞。
3.对于读写的connfd，边缘触发模式下，必须使用非阻塞IO，并要一次性全部读写完数据

内存泄漏检查工具
valgrind --log-file="valgrind.log" --tool=memcheck --leak-check=full --show-reachable=yes --trace-children=yes --track-origins=yes ./candy